// vite.config.mts
import { resolve as resolve2 } from "node:path";
import { defineConfig } from "file:///Users/rezvitsky/Desktop/chrome-extension-boilerplate-react-vite/node_modules/vite/dist/node/index.js";
import libAssetsPlugin from "file:///Users/rezvitsky/Desktop/chrome-extension-boilerplate-react-vite/node_modules/@laynezh/vite-plugin-lib-assets/dist/index.js";

// utils/plugins/make-manifest-plugin.ts
import fs from "node:fs";
import { resolve } from "node:path";
import { pathToFileURL } from "node:url";
import process from "node:process";
import { colorLog, ManifestParser } from "file:///Users/rezvitsky/Desktop/chrome-extension-boilerplate-react-vite/packages/dev-utils/dist/index.js";
var __vite_injected_original_dirname = "/Users/rezvitsky/Desktop/chrome-extension-boilerplate-react-vite/chrome-extension/utils/plugins";
var rootDir = resolve(__vite_injected_original_dirname, "..", "..");
var manifestFile = resolve(rootDir, "manifest.js");
var getManifestWithCacheBurst = async () => {
  const withCacheBurst = (path) => `${path}?${Date.now().toString()}`;
  if (process.platform === "win32") {
    return import(withCacheBurst(pathToFileURL(manifestFile).href));
  }
  return import(withCacheBurst(manifestFile));
};
function makeManifestPlugin(config) {
  function makeManifest(manifest, to) {
    if (!fs.existsSync(to)) {
      fs.mkdirSync(to);
    }
    const manifestPath = resolve(to, "manifest.json");
    fs.writeFileSync(manifestPath, ManifestParser.convertManifestToString(manifest, "chrome"));
    colorLog(`Manifest file copy complete: ${manifestPath}`, "success");
  }
  return {
    name: "make-manifest",
    buildStart() {
      this.addWatchFile(manifestFile);
    },
    async writeBundle() {
      const outDir2 = config.outDir;
      const manifest = await getManifestWithCacheBurst();
      makeManifest(manifest.default, outDir2);
    }
  };
}

// vite.config.mts
import { watchPublicPlugin, watchRebuildPlugin } from "file:///Users/rezvitsky/Desktop/chrome-extension-boilerplate-react-vite/packages/hmr/dist/index.js";
import { isDev, isProduction, watchOption } from "file:///Users/rezvitsky/Desktop/chrome-extension-boilerplate-react-vite/packages/vite-config/index.mjs";
var __vite_injected_original_dirname2 = "/Users/rezvitsky/Desktop/chrome-extension-boilerplate-react-vite/chrome-extension";
var rootDir2 = resolve2(__vite_injected_original_dirname2);
var srcDir = resolve2(rootDir2, "src");
var outDir = resolve2(rootDir2, "..", "dist");
var vite_config_default = defineConfig({
  resolve: {
    alias: {
      "@root": rootDir2,
      "@src": srcDir,
      "@assets": resolve2(srcDir, "assets")
    }
  },
  plugins: [
    libAssetsPlugin({
      outputPath: outDir
    }),
    watchPublicPlugin(),
    makeManifestPlugin({ outDir }),
    isDev && watchRebuildPlugin({ reload: true })
  ],
  publicDir: resolve2(rootDir2, "public"),
  build: {
    lib: {
      formats: ["iife"],
      entry: resolve2(__vite_injected_original_dirname2, "src/background/index.ts"),
      name: "BackgroundScript",
      fileName: "background"
    },
    outDir,
    emptyOutDir: false,
    sourcemap: isDev,
    minify: isProduction,
    reportCompressedSize: isProduction,
    watch: watchOption,
    rollupOptions: {
      external: ["chrome"]
    }
  },
  envDir: "../"
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcubXRzIiwgInV0aWxzL3BsdWdpbnMvbWFrZS1tYW5pZmVzdC1wbHVnaW4udHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvVXNlcnMvcmV6dml0c2t5L0Rlc2t0b3AvY2hyb21lLWV4dGVuc2lvbi1ib2lsZXJwbGF0ZS1yZWFjdC12aXRlL2Nocm9tZS1leHRlbnNpb25cIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIi9Vc2Vycy9yZXp2aXRza3kvRGVza3RvcC9jaHJvbWUtZXh0ZW5zaW9uLWJvaWxlcnBsYXRlLXJlYWN0LXZpdGUvY2hyb21lLWV4dGVuc2lvbi92aXRlLmNvbmZpZy5tdHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL1VzZXJzL3JlenZpdHNreS9EZXNrdG9wL2Nocm9tZS1leHRlbnNpb24tYm9pbGVycGxhdGUtcmVhY3Qtdml0ZS9jaHJvbWUtZXh0ZW5zaW9uL3ZpdGUuY29uZmlnLm10c1wiO2ltcG9ydCB7IHJlc29sdmUgfSBmcm9tICdub2RlOnBhdGgnXG5pbXBvcnQgeyBkZWZpbmVDb25maWcsIHR5cGUgUGx1Z2luT3B0aW9uIH0gZnJvbSAndml0ZSdcbmltcG9ydCBsaWJBc3NldHNQbHVnaW4gZnJvbSAnQGxheW5lemgvdml0ZS1wbHVnaW4tbGliLWFzc2V0cydcbmltcG9ydCBtYWtlTWFuaWZlc3RQbHVnaW4gZnJvbSAnLi91dGlscy9wbHVnaW5zL21ha2UtbWFuaWZlc3QtcGx1Z2luJ1xuaW1wb3J0IHsgd2F0Y2hQdWJsaWNQbHVnaW4sIHdhdGNoUmVidWlsZFBsdWdpbiB9IGZyb20gJ0BleHRlbnNpb24vaG1yJ1xuaW1wb3J0IHsgaXNEZXYsIGlzUHJvZHVjdGlvbiwgd2F0Y2hPcHRpb24gfSBmcm9tICdAZXh0ZW5zaW9uL3ZpdGUtY29uZmlnJ1xuXG5jb25zdCByb290RGlyID0gcmVzb2x2ZShfX2Rpcm5hbWUpXG5jb25zdCBzcmNEaXIgPSByZXNvbHZlKHJvb3REaXIsICdzcmMnKVxuXG5jb25zdCBvdXREaXIgPSByZXNvbHZlKHJvb3REaXIsICcuLicsICdkaXN0JylcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKHtcbiAgcmVzb2x2ZToge1xuICAgIGFsaWFzOiB7XG4gICAgICAnQHJvb3QnOiByb290RGlyLFxuICAgICAgJ0BzcmMnOiBzcmNEaXIsXG4gICAgICAnQGFzc2V0cyc6IHJlc29sdmUoc3JjRGlyLCAnYXNzZXRzJyksXG4gICAgfSxcbiAgfSxcbiAgcGx1Z2luczogW1xuICAgIGxpYkFzc2V0c1BsdWdpbih7XG4gICAgICBvdXRwdXRQYXRoOiBvdXREaXIsXG4gICAgfSkgYXMgUGx1Z2luT3B0aW9uLFxuICAgIHdhdGNoUHVibGljUGx1Z2luKCksXG4gICAgbWFrZU1hbmlmZXN0UGx1Z2luKHsgb3V0RGlyIH0pLFxuICAgIGlzRGV2ICYmIHdhdGNoUmVidWlsZFBsdWdpbih7IHJlbG9hZDogdHJ1ZSB9KSxcbiAgXSxcbiAgcHVibGljRGlyOiByZXNvbHZlKHJvb3REaXIsICdwdWJsaWMnKSxcbiAgYnVpbGQ6IHtcbiAgICBsaWI6IHtcbiAgICAgIGZvcm1hdHM6IFsnaWlmZSddLFxuICAgICAgZW50cnk6IHJlc29sdmUoX19kaXJuYW1lLCAnc3JjL2JhY2tncm91bmQvaW5kZXgudHMnKSxcbiAgICAgIG5hbWU6ICdCYWNrZ3JvdW5kU2NyaXB0JyxcbiAgICAgIGZpbGVOYW1lOiAnYmFja2dyb3VuZCcsXG4gICAgfSxcbiAgICBvdXREaXIsXG4gICAgZW1wdHlPdXREaXI6IGZhbHNlLFxuICAgIHNvdXJjZW1hcDogaXNEZXYsXG4gICAgbWluaWZ5OiBpc1Byb2R1Y3Rpb24sXG4gICAgcmVwb3J0Q29tcHJlc3NlZFNpemU6IGlzUHJvZHVjdGlvbixcbiAgICB3YXRjaDogd2F0Y2hPcHRpb24sXG4gICAgcm9sbHVwT3B0aW9uczoge1xuICAgICAgZXh0ZXJuYWw6IFsnY2hyb21lJ10sXG4gICAgfSxcbiAgfSxcbiAgZW52RGlyOiAnLi4vJyxcbn0pXG4iLCAiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIi9Vc2Vycy9yZXp2aXRza3kvRGVza3RvcC9jaHJvbWUtZXh0ZW5zaW9uLWJvaWxlcnBsYXRlLXJlYWN0LXZpdGUvY2hyb21lLWV4dGVuc2lvbi91dGlscy9wbHVnaW5zXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvcmV6dml0c2t5L0Rlc2t0b3AvY2hyb21lLWV4dGVuc2lvbi1ib2lsZXJwbGF0ZS1yZWFjdC12aXRlL2Nocm9tZS1leHRlbnNpb24vdXRpbHMvcGx1Z2lucy9tYWtlLW1hbmlmZXN0LXBsdWdpbi50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvcmV6dml0c2t5L0Rlc2t0b3AvY2hyb21lLWV4dGVuc2lvbi1ib2lsZXJwbGF0ZS1yZWFjdC12aXRlL2Nocm9tZS1leHRlbnNpb24vdXRpbHMvcGx1Z2lucy9tYWtlLW1hbmlmZXN0LXBsdWdpbi50c1wiO2ltcG9ydCBmcyBmcm9tICdub2RlOmZzJ1xuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ25vZGU6cGF0aCdcbmltcG9ydCB7IHBhdGhUb0ZpbGVVUkwgfSBmcm9tICdub2RlOnVybCdcbmltcG9ydCBwcm9jZXNzIGZyb20gJ25vZGU6cHJvY2VzcydcbmltcG9ydCB7IGNvbG9yTG9nLCBNYW5pZmVzdFBhcnNlciB9IGZyb20gJ0BleHRlbnNpb24vZGV2LXV0aWxzJ1xuaW1wb3J0IHR5cGUgeyBQbHVnaW5PcHRpb24gfSBmcm9tICd2aXRlJ1xuXG5jb25zdCByb290RGlyID0gcmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICcuLicpXG5jb25zdCBtYW5pZmVzdEZpbGUgPSByZXNvbHZlKHJvb3REaXIsICdtYW5pZmVzdC5qcycpXG5cblxuY29uc3QgZ2V0TWFuaWZlc3RXaXRoQ2FjaGVCdXJzdCA9IGFzeW5jICgpOiBQcm9taXNlPHsgZGVmYXVsdDogY2hyb21lLnJ1bnRpbWUuTWFuaWZlc3RWMyB9PiA9PiB7XG4gIGNvbnN0IHdpdGhDYWNoZUJ1cnN0ID0gKHBhdGg6IHN0cmluZykgPT4gYCR7IHBhdGggfT8keyBEYXRlLm5vdygpLnRvU3RyaW5nKCkgfWBcblxuICAvKipcbiAgICogSW4gV2luZG93cywgaW1wb3J0KCkgZG9lc24ndCB3b3JrIHdpdGhvdXQgZmlsZTovLyBwcm90b2NvbC5cbiAgICogU28sIHdlIG5lZWQgdG8gY29udmVydCBwYXRoIHRvIGZpbGU6Ly8gcHJvdG9jb2wuICh1cmwucGF0aFRvRmlsZVVSTClcbiAgICovXG4gIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKSB7XG4gICAgcmV0dXJuIGltcG9ydCh3aXRoQ2FjaGVCdXJzdChwYXRoVG9GaWxlVVJMKG1hbmlmZXN0RmlsZSkuaHJlZikpXG4gIH1cblxuICByZXR1cm4gaW1wb3J0KHdpdGhDYWNoZUJ1cnN0KG1hbmlmZXN0RmlsZSkpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1ha2VNYW5pZmVzdFBsdWdpbihjb25maWc6IHsgb3V0RGlyOiBzdHJpbmcgfSk6IFBsdWdpbk9wdGlvbiB7XG4gIGZ1bmN0aW9uIG1ha2VNYW5pZmVzdChtYW5pZmVzdDogY2hyb21lLnJ1bnRpbWUuTWFuaWZlc3RWMywgdG86IHN0cmluZykge1xuICAgIGlmICghZnMuZXhpc3RzU3luYyh0bykpIHtcbiAgICAgIGZzLm1rZGlyU3luYyh0bylcbiAgICB9XG4gICAgY29uc3QgbWFuaWZlc3RQYXRoID0gcmVzb2x2ZSh0bywgJ21hbmlmZXN0Lmpzb24nKVxuXG4gICAgZnMud3JpdGVGaWxlU3luYyhtYW5pZmVzdFBhdGgsIE1hbmlmZXN0UGFyc2VyLmNvbnZlcnRNYW5pZmVzdFRvU3RyaW5nKG1hbmlmZXN0LCAnY2hyb21lJykpXG5cbiAgICBjb2xvckxvZyhgTWFuaWZlc3QgZmlsZSBjb3B5IGNvbXBsZXRlOiAke21hbmlmZXN0UGF0aH1gLCAnc3VjY2VzcycpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdtYWtlLW1hbmlmZXN0JyxcbiAgICBidWlsZFN0YXJ0KCkge1xuICAgICAgdGhpcy5hZGRXYXRjaEZpbGUobWFuaWZlc3RGaWxlKVxuICAgIH0sXG4gICAgYXN5bmMgd3JpdGVCdW5kbGUoKSB7XG4gICAgICBjb25zdCBvdXREaXIgPSBjb25maWcub3V0RGlyXG4gICAgICBjb25zdCBtYW5pZmVzdCA9IGF3YWl0IGdldE1hbmlmZXN0V2l0aENhY2hlQnVyc3QoKVxuICAgICAgbWFrZU1hbmlmZXN0KG1hbmlmZXN0LmRlZmF1bHQsIG91dERpcilcbiAgICB9LFxuICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQXVhLFNBQVMsV0FBQUEsZ0JBQWU7QUFDL2IsU0FBUyxvQkFBdUM7QUFDaEQsT0FBTyxxQkFBcUI7OztBQ0ZxYyxPQUFPLFFBQVE7QUFDaGYsU0FBUyxlQUFlO0FBQ3hCLFNBQVMscUJBQXFCO0FBQzlCLE9BQU8sYUFBYTtBQUNwQixTQUFTLFVBQVUsc0JBQXNCO0FBSnpDLElBQU0sbUNBQW1DO0FBT3pDLElBQU0sVUFBVSxRQUFRLGtDQUFXLE1BQU0sSUFBSTtBQUM3QyxJQUFNLGVBQWUsUUFBUSxTQUFTLGFBQWE7QUFHbkQsSUFBTSw0QkFBNEIsWUFBNkQ7QUFDN0YsUUFBTSxpQkFBaUIsQ0FBQyxTQUFpQixHQUFJLElBQUssSUFBSyxLQUFLLElBQUksRUFBRSxTQUFTLENBQUU7QUFNN0UsTUFBSSxRQUFRLGFBQWEsU0FBUztBQUNoQyxXQUFPLE9BQU8sZUFBZSxjQUFjLFlBQVksRUFBRSxJQUFJO0FBQUEsRUFDL0Q7QUFFQSxTQUFPLE9BQU8sZUFBZSxZQUFZO0FBQzNDO0FBRWUsU0FBUixtQkFBb0MsUUFBMEM7QUFDbkYsV0FBUyxhQUFhLFVBQXFDLElBQVk7QUFDckUsUUFBSSxDQUFDLEdBQUcsV0FBVyxFQUFFLEdBQUc7QUFDdEIsU0FBRyxVQUFVLEVBQUU7QUFBQSxJQUNqQjtBQUNBLFVBQU0sZUFBZSxRQUFRLElBQUksZUFBZTtBQUVoRCxPQUFHLGNBQWMsY0FBYyxlQUFlLHdCQUF3QixVQUFVLFFBQVEsQ0FBQztBQUV6RixhQUFTLGdDQUFnQyxZQUFZLElBQUksU0FBUztBQUFBLEVBQ3BFO0FBRUEsU0FBTztBQUFBLElBQ0wsTUFBTTtBQUFBLElBQ04sYUFBYTtBQUNYLFdBQUssYUFBYSxZQUFZO0FBQUEsSUFDaEM7QUFBQSxJQUNBLE1BQU0sY0FBYztBQUNsQixZQUFNQyxVQUFTLE9BQU87QUFDdEIsWUFBTSxXQUFXLE1BQU0sMEJBQTBCO0FBQ2pELG1CQUFhLFNBQVMsU0FBU0EsT0FBTTtBQUFBLElBQ3ZDO0FBQUEsRUFDRjtBQUNGOzs7QUQ1Q0EsU0FBUyxtQkFBbUIsMEJBQTBCO0FBQ3RELFNBQVMsT0FBTyxjQUFjLG1CQUFtQjtBQUxqRCxJQUFNQyxvQ0FBbUM7QUFPekMsSUFBTUMsV0FBVUMsU0FBUUMsaUNBQVM7QUFDakMsSUFBTSxTQUFTRCxTQUFRRCxVQUFTLEtBQUs7QUFFckMsSUFBTSxTQUFTQyxTQUFRRCxVQUFTLE1BQU0sTUFBTTtBQUU1QyxJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUMxQixTQUFTO0FBQUEsSUFDUCxPQUFPO0FBQUEsTUFDTCxTQUFTQTtBQUFBLE1BQ1QsUUFBUTtBQUFBLE1BQ1IsV0FBV0MsU0FBUSxRQUFRLFFBQVE7QUFBQSxJQUNyQztBQUFBLEVBQ0Y7QUFBQSxFQUNBLFNBQVM7QUFBQSxJQUNQLGdCQUFnQjtBQUFBLE1BQ2QsWUFBWTtBQUFBLElBQ2QsQ0FBQztBQUFBLElBQ0Qsa0JBQWtCO0FBQUEsSUFDbEIsbUJBQW1CLEVBQUUsT0FBTyxDQUFDO0FBQUEsSUFDN0IsU0FBUyxtQkFBbUIsRUFBRSxRQUFRLEtBQUssQ0FBQztBQUFBLEVBQzlDO0FBQUEsRUFDQSxXQUFXQSxTQUFRRCxVQUFTLFFBQVE7QUFBQSxFQUNwQyxPQUFPO0FBQUEsSUFDTCxLQUFLO0FBQUEsTUFDSCxTQUFTLENBQUMsTUFBTTtBQUFBLE1BQ2hCLE9BQU9DLFNBQVFDLG1DQUFXLHlCQUF5QjtBQUFBLE1BQ25ELE1BQU07QUFBQSxNQUNOLFVBQVU7QUFBQSxJQUNaO0FBQUEsSUFDQTtBQUFBLElBQ0EsYUFBYTtBQUFBLElBQ2IsV0FBVztBQUFBLElBQ1gsUUFBUTtBQUFBLElBQ1Isc0JBQXNCO0FBQUEsSUFDdEIsT0FBTztBQUFBLElBQ1AsZUFBZTtBQUFBLE1BQ2IsVUFBVSxDQUFDLFFBQVE7QUFBQSxJQUNyQjtBQUFBLEVBQ0Y7QUFBQSxFQUNBLFFBQVE7QUFDVixDQUFDOyIsCiAgIm5hbWVzIjogWyJyZXNvbHZlIiwgIm91dERpciIsICJfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSIsICJyb290RGlyIiwgInJlc29sdmUiLCAiX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUiXQp9Cg==
